apply plugin: 'com.android.application'

apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.greenrobot.greendao'
apply plugin: 'io.fabric'
apply plugin: 'com.google.gms.google-services'

android {

    dataBinding {
        enabled = true
    }

    def globalConfiguration = rootProject.extensions.getByName("ext")

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def MAPS_KEY = properties.getProperty('MAPS_KEY')

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")

        versionCode globalConfiguration.getAt("androidVersionCode")
        versionName globalConfiguration.getAt("androidVersionName")

        testInstrumentationRunner globalConfiguration.getAt("testInstrumentationRunner")
        testApplicationId globalConfiguration.getAt("testApplicationId")
        multiDexEnabled true

        buildConfigField "int", "BUILD_NUMBER", globalConfiguration.getAt("androidBuildNumber").toString()

        resValue "string", "maps_key", "$MAPS_KEY"


    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    kotlinOptions {
        languageVersion = "1.3"
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'            //Some libraries have issues with this.
        disable 'OldTargetApi'
        //Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'IconDensities'             //For testing purpose. This is safe to remove.
        disable 'IconMissingDensityFolder'  //For testing purpose. This is safe to remove.
    }

    signingConfigs {
        debug {
            storeFile file('../buildsystem/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
    }

    buildToolsVersion androidBuildToolsVersion

    flavorDimensions "version"
    productFlavors {
        def SERVER_URL = "SERVER_URL"
        def PREFIX_URL = "PREFIX_URL"

        prod {
            dimension "version"
            versionNameSuffix "-prod"
            buildConfigField "String", SERVER_URL, "\"https://api.forus.link/\""
            buildConfigField "String", PREFIX_URL, "\"\""
            applicationId 'io.forus.me'
        }
        demo {
            dimension "version"
            versionNameSuffix "-demo"
            buildConfigField "String", SERVER_URL, "\"https://demo.api.forus.io/\""
            buildConfigField "String", PREFIX_URL, "\"demo.\""
            applicationId 'io.forus.me.beta'
        }
        staging {
            dimension "version"
            versionNameSuffix "-staging"
            buildConfigField "String", SERVER_URL, "\"https://staging.api.forus.io/\""
            buildConfigField "String", PREFIX_URL, "\"staging.\""
            applicationId 'io.forus.me.alpha'
        }
        dev {
            dimension "version"
            versionNameSuffix "-dev"
            buildConfigField "String", SERVER_URL, "\"https://test.api.forus.rminds.dev/\"" //\"https://dev.api.forus.io/\""
            buildConfigField "String", PREFIX_URL, "\"dev.\""
            applicationId 'io.forus.me.dev'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def project = "me"
            def SEP = "-"
            def flavor = variant.productFlavors[0].name
            def buildType = variant.variantData.variantConfiguration.buildType.name
            def version = variant.versionName
            def buildNumber = globalConfiguration.getAt("androidBuildNumber").toString()
            def newApkName = project + SEP + version + SEP + buildNumber + SEP + buildType + ".apk"

            outputFileName = new File(newApkName)
        }
    }
}

greendao {
    schemaVersion 1
}

dependencies {
    def presentationDependencies = rootProject.ext.presentationDependencies
    def presentationTestDependencies = rootProject.ext.presentationTestDependencies
    def developmentDependencies = rootProject.ext.developmentDependencies


    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation project(':domain')
    implementation project(':data')

    implementation 'com.android.support:support-v4:28.0.0'
    annotationProcessor presentationDependencies.daggerCompiler

    implementation presentationDependencies.supportLib
    implementation presentationDependencies.dagger
    implementation presentationDependencies.greendao
    implementation presentationDependencies.recyclerView
    implementation presentationDependencies.supportDesign
    implementation presentationDependencies.appCompat
    implementation presentationDependencies.customTabsIntent
    implementation presentationDependencies.multiDex
    implementation presentationDependencies.qrGet
    implementation presentationDependencies.qrGetAndroid
    implementation presentationDependencies.mvi
    implementation presentationDependencies.mviViewState
    implementation presentationDependencies.rxbinding
    implementation presentationDependencies.rxbindingSupport
    implementation presentationDependencies.rxbindingDesign
    implementation presentationDependencies.rxJava
    implementation presentationDependencies.rxAndroid
    implementation presentationDependencies.ahbottomnavigation
    implementation presentationDependencies.cardView
    implementation presentationDependencies.slidingUpPanel
    implementation presentationDependencies.glide
    implementation presentationDependencies.circleIndicator
    implementation presentationDependencies.materialDialogs
    implementation presentationDependencies.fingerprint
    implementation presentationDependencies.firebaseCore
    implementation presentationDependencies.firebaseMessaging
    implementation presentationDependencies.googleMaps

    implementation(presentationDependencies.fabric) {
        transitive = true
    }

    compileOnly presentationDependencies.javaxAnnotation

    androidTestImplementation presentationTestDependencies.mockito
    androidTestImplementation presentationTestDependencies.dexmaker
    androidTestImplementation presentationTestDependencies.dexmakerMockito
    androidTestImplementation presentationTestDependencies.espresso
    androidTestImplementation presentationTestDependencies.testingSupportLib

    //Development
    implementation developmentDependencies.leakCanary
    implementation(presentationDependencies.qrReader) {
        transitive = true
    }
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
}
