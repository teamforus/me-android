plugins {
    id('com.android.application')
    id('kotlin-android')
    id('kotlin-kapt')
    id ('kotlin-parcelize')
    id('org.greenrobot.greendao')
    id('io.fabric')
    id('com.google.gms.google-services')
}

def secretsPropertiesFile = rootProject.file("secrets.properties")
def secretsProperties = new Properties()
if (secretsPropertiesFile.exists()) {
    secretsProperties.load(new FileInputStream(secretsPropertiesFile))
}


android {

    dataBinding {
        enabled = true
    }

    def globalConfiguration = rootProject.extensions.getByName("ext")

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def MAPS_KEY = properties.getProperty('MAPS_KEY')

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")

        versionCode globalConfiguration.getAt("androidVersionCode")
        versionName globalConfiguration.getAt("androidVersionName")

        testInstrumentationRunner globalConfiguration.getAt("testInstrumentationRunner")
        testApplicationId globalConfiguration.getAt("testApplicationId")
        multiDexEnabled true

        buildConfigField "int", "BUILD_NUMBER", globalConfiguration.getAt("androidBuildNumber").toString()

        resValue "string", "maps_key", "$MAPS_KEY"

        buildConfigField "String", "SERVER_API_KEY", secretsPropertiesFile.exists() ? "\"${secretsProperties['SERVER_API_KEY']}\"" : "\"fff\""
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        languageVersion = "1.3"
        jvmTarget = '17'
    }
    packagingOptions {
        resources {
            excludes += ['LICENSE.txt', 'META-INF/DEPENDENCIES', 'META-INF/ASL2.0', 'META-INF/NOTICE', 'META-INF/LICENSE']
        }
    }


    signingConfigs {
        debug {
            storeFile file('../buildsystem/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
    }


    flavorDimensions "version"
    productFlavors {
        def SERVER_URL = "SERVER_URL"
        def PREFIX_URL = "PREFIX_URL"

        prod {
            dimension "version"
            versionNameSuffix "-prod"
            // buildConfigField "String", SERVER_URL, "\"https://test.api.forus.rminds.dev/\""
            buildConfigField "String", SERVER_URL, "\"https://api.forus.io/\""
            buildConfigField "String", PREFIX_URL, "\"\""
            applicationId 'io.forus.me'
        }
        demo {
            dimension "version"
            versionNameSuffix "-demo"
            buildConfigField "String", SERVER_URL, "\"https://demo.api.forus.io/\""
            buildConfigField "String", PREFIX_URL, "\"demo.\""
            applicationId 'io.forus.me.demo'
        }
        staging {
            dimension "version"
            versionNameSuffix "-staging"
            buildConfigField "String", SERVER_URL, "\"https://staging.api.forus.io/\""
            buildConfigField "String", PREFIX_URL, "\"staging.\""
            applicationId 'io.forus.me.staging' //alpha
        }
        dev {
            dimension "version"
            versionNameSuffix "-dev"
            //buildConfigField "String", SERVER_URL, "\"https://staging.api.forus.io/\"" //TODO
            //buildConfigField "String", SERVER_URL, "\"https://test.api.forus.rminds.dev/\""  //TODO
            buildConfigField "String", SERVER_URL, "\"https://dev.api.forus.io/\"" //TODO
            buildConfigField "String", PREFIX_URL, "\"dev.\""
            applicationId 'io.forus.me.dev'
        }
    }
    sourceSets {
        main {
            java {
                srcDirs 'src/main/java', 'src/test'
            }
        }
    }
    buildFeatures {
        viewBinding true
    }
    namespace 'io.forus.me.android.presentation'
    lint {
        abortOnError false
        disable 'InvalidPackage', 'OldTargetApi', 'IconDensities', 'IconMissingDensityFolder'
        ignoreWarnings true
        quiet true
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def project = "me"
            def SEP = "-"
            def flavor = variant.productFlavors[0].name
            //def buildType = variant.variantData.variantConfiguration.buildType.name
            def buildType = variant.buildType.name
            def version = variant.versionName
            def buildNumber = globalConfiguration.getAt("androidBuildNumber").toString()
            def newApkName = project + SEP + version + SEP + buildNumber + SEP + buildType + ".apk"

            outputFileName = new File(newApkName)
        }
    }
}

greendao {
    schemaVersion 1
}

dependencies {
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    def presentationDependencies = rootProject.ext.presentationDependencies
    def presentationTestDependencies = rootProject.ext.presentationTestDependencies
    def developmentDependencies = rootProject.ext.developmentDependencies


    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation project(':domain')
    implementation project(':data')

    implementation 'androidx.legacy:legacy-support-v13:1.0.0'
    annotationProcessor presentationDependencies.daggerCompiler

    implementation presentationDependencies.supportLib
    implementation presentationDependencies.dagger
    implementation presentationDependencies.greendao
    implementation presentationDependencies.recyclerView
    implementation presentationDependencies.supportDesign
    implementation presentationDependencies.appCompat
    implementation presentationDependencies.customTabsIntent
    implementation presentationDependencies.multiDex
    implementation presentationDependencies.qrGet
    implementation presentationDependencies.qrGetAndroid

    implementation "com.hannesdorfmann.mosby3:mvi:3.1.1"
    implementation "com.hannesdorfmann.mosby3:viewstate:3.1.1"

   // implementation 'com.github.sockeqwe:mosby:345efbb0c0'


    implementation "com.jakewharton.rxbinding2:rxbinding:2.2.0"
    implementation "com.jakewharton.rxbinding2:rxbinding-support-v4:2.2.0"
    implementation "com.jakewharton.rxbinding2:rxbinding-design:2.2.0"
    implementation presentationDependencies.rxJava
    implementation presentationDependencies.rxAndroid
    implementation presentationDependencies.ahbottomnavigation
    implementation presentationDependencies.cardView
    implementation presentationDependencies.glide
    implementation presentationDependencies.circleIndicator
    implementation presentationDependencies.materialDialogs
    implementation presentationDependencies.fingerprint
    implementation presentationDependencies.googleMaps
    implementation presentationDependencies.playCore
    implementation presentationDependencies.navigationFragment
    implementation presentationDependencies.navigationUI



    implementation(presentationDependencies.fabric) {
        transitive = true
    }

    compileOnly presentationDependencies.javaxAnnotation

    androidTestImplementation presentationTestDependencies.mockito
    androidTestImplementation presentationTestDependencies.dexmaker
    androidTestImplementation presentationTestDependencies.dexmakerMockito
    androidTestImplementation presentationTestDependencies.espresso

    androidTestImplementation presentationTestDependencies.runner
    androidTestImplementation presentationTestDependencies.rules

    //Development
    implementation developmentDependencies.leakCanary

    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.github.douglasjunior:android-simple-tooltip:0.2.3'
    implementation 'com.wdullaer:materialdatetimepicker:4.2.3'


    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.5.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1'
    implementation 'com.google.code.gson:gson:2.10.1'

    implementation ('com.dlazaro66.qrcodereaderview:qrcodereaderview:2.0.3@aar'){
        transitive = true
    }

    implementation 'com.google.android.material:material:1.10.0'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    implementation(platform("com.google.firebase:firebase-bom:32.2.2"))
    implementation 'com.google.firebase:firebase-firestore-ktx'
    implementation 'com.google.firebase:firebase-storage-ktx'
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation 'com.google.firebase:firebase-messaging-ktx'
    implementation("com.google.firebase:firebase-analytics-ktx")
    implementation 'com.google.firebase:firebase-firestore-ktx:24.8.1'
    implementation 'com.google.firebase:firebase-storage-ktx:20.2.1'
    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    implementation 'com.pacioianu.david:ink-page-indicator:1.3.0'
    implementation 'me.relex:circleindicator:2.1.6'

}
